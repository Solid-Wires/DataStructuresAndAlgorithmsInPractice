Random int sample n = 20
Name (time in us)                                  Min                    Max               Mean              StdDev             Median               IQR            Outliers  OPS (Kops/s)            Rounds  Iterations
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test_insertion_sort_random_ints_constant_n      5.8920 (1.0)      12,021.3530 (1.19)      8.8395 (1.0)      110.4621 (1.0)       6.3141 (1.0)      0.4212 (1.0)       86;4251      113.1290 (1.0)       86378           1
test_bubble_sort_random_ints_constant_n        11.9950 (2.04)     10,130.3998 (1.0)      17.4328 (1.97)     133.8246 (1.21)     12.8378 (2.03)     1.0519 (2.50)      96;3464       57.3631 (0.51)      50018           1
test_merge_sort_random_ints_constant_n         21.0479 (3.57)     12,886.4490 (1.27)     33.5328 (3.79)     223.8915 (2.03)     22.5219 (3.57)     3.7882 (8.99)      54;2699       29.8216 (0.26)      24680           1

Random int sample n = 2000
Name (time in ms)                                   Min                 Max                Mean             StdDev              Median                IQR            Outliers       OPS            Rounds  Iterations
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test_merge_sort_random_ints_constant_n           4.5318 (1.0)       18.3498 (1.0)        7.4547 (1.0)       3.2333 (1.0)        5.5972 (1.0)       3.5511 (1.0)          36;9  134.1432 (1.0)         179           1
test_insertion_sort_random_ints_constant_n      90.2424 (19.91)    130.9164 (7.13)     103.8565 (13.93)    14.7981 (4.58)      99.4499 (17.77)    20.3078 (5.72)          2;0    9.6287 (0.07)          8           1
test_bubble_sort_random_ints_constant_n        211.6840 (46.71)    286.1737 (15.60)    241.7326 (32.43)    32.0863 (9.92)     233.3565 (41.69)    54.6215 (15.38)         1;0    4.1368 (0.03)          5           1

Random int sample n = 20000
Name (time in ms)                                      Min                    Max                   Mean                StdDev                 Median                   IQR            Outliers      OPS            Rounds  Iterations
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test_merge_sort_random_ints_constant_n             67.5935 (1.0)         120.4064 (1.0)          90.5119 (1.0)         16.8172 (1.0)          91.9689 (1.0)         24.5561 (1.0)           4;0  11.0483 (1.0)          11           1
test_insertion_sort_random_ints_constant_n     11,262.1909 (166.62)   13,929.3031 (115.69)   12,991.3482 (143.53)   1,071.0882 (63.69)    13,360.8226 (145.28)   1,412.0656 (57.50)         1;0   0.0770 (0.01)          5           1
(Bubble Sort excluded)

Unsurprisingly, without the optimization, bubble sort is terrible. But merge sort for a large n size isn't
any better than good ol' insertion sort though on small input sizes. Larger input sizes, however, around
2000 or so, merge sort is clearly superior over insertion sort. This seriously confused me in college, but
I must concede that AI helped me understand these algorithms more than any teacher ever did, no offense.
The AI also introduced me to pytest-benchmark, which was how I was able to even write up these performance
metrics in the first place conveniently, and helped me troubleshoot surprisingly well - I was hesitant to use
that at first, but look, there wasn't anyone else around to help me understand this now. But I digress.
