Name (time in us)                              Min                     Max                    Mean                 StdDev                  Median                    IQR            Outliers          OPS            Rounds  Iterations
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test_insertion_sort_scaling[20]             7.9160 (1.0)        9,577.1339 (1.0)           10.8555 (1.0)          96.1798 (1.0)            8.4450 (1.0)           0.3220 (1.0)      138;4715  92,119.1529 (1.0)       91092           1
test_bubble_sort_scaling[20]               13.0979 (1.65)      10,085.4130 (1.05)          17.8305 (1.64)        119.0946 (1.24)          14.0481 (1.66)          0.6340 (1.97)     125;4161  56,083.5803 (0.61)      59169           1
test_merge_sort_scaling[20]                21.1110 (2.67)      10,388.0281 (1.08)          34.3460 (3.16)        214.5056 (2.23)          23.2225 (2.75)          2.9572 (9.18)     107;2622  29,115.4776 (0.32)      27540           1
test_merge_sort_scaling[200]              286.5891 (36.20)     14,433.5220 (1.51)         438.1718 (40.36)       859.9871 (8.94)         338.4179 (40.07)        39.9267 (123.99)     36;191   2,282.2099 (0.02)       2779           1
test_insertion_sort_scaling[200]          488.7341 (61.74)     11,689.4820 (1.22)         654.6974 (60.31)       706.5509 (7.35)         559.1389 (66.21)        60.8012 (188.82)     28;110   1,527.4233 (0.02)       1574           1
test_bubble_sort_scaling[200]           1,109.0939 (140.11)    13,673.7190 (1.43)       1,474.8019 (135.86)    1,165.9880 (12.12)      1,240.7240 (146.92)       94.6327 (293.89)      26;88     678.0571 (0.01)        727           1
test_merge_sort_scaling[2000]           4,485.5631 (566.64)    18,274.9860 (1.91)       5,849.8032 (538.88)    2,169.7634 (22.56)      5,161.8051 (611.23)      491.4158 (>1000.0)     18;21     170.9459 (0.00)        189           1
test_insertion_sort_scaling[2000]      82,960.9809 (>1000.0)  117,175.6780 (12.23)    104,188.7873 (>1000.0)  10,369.9822 (107.82)   105,631.3724 (>1000.0)  13,820.2854 (>1000.0)       4;0       9.5980 (0.00)         12           1
test_bubble_sort_scaling[2000]        214,680.3830 (>1000.0)  269,577.9281 (28.15)    237,046.9166 (>1000.0)  20,880.7147 (217.10)   233,406.7211 (>1000.0)  26,756.0242 (>1000.0)       2;0       4.2186 (0.00)          5           1

Unsurprisingly, without the optimization, bubble sort is terrible. But merge sort for a large n size isn't
any better than good ol' insertion sort though on small input sizes. Larger input sizes, however, around
2000 or so, merge sort is clearly superior over insertion sort. This seriously confused me in college, but
I must concede that AI helped me understand these algorithms more than any teacher ever did, no offense.
The AI also introduced me to pytest-benchmark, which was how I was able to even write up these performance
metrics in the first place conveniently, and helped me troubleshoot surprisingly well - I was hesitant to use
that at first, but look, there wasn't anyone else around to help me understand this now. But I digress.
